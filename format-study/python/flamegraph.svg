<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="373.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="2214"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.05%)</title><rect x="0.0000%" y="309" width="0.0452%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.05%)</title><rect x="0.0000%" y="293" width="0.0452%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`close (1 samples, 0.05%)</title><rect x="0.0452%" y="245" width="0.0452%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.2952%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.05%)</title><rect x="0.0903%" y="245" width="0.0452%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.3403%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.05%)</title><rect x="0.1355%" y="245" width="0.0452%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="1"/><text x="0.3855%" y="255.50"></text></g><g><title>metadata-aebf7f20f32a140a`core::ptr::drop_in_place&lt;core::option::Option&lt;parquet::format::ColumnCryptoMetaData&gt;&gt; (1 samples, 0.05%)</title><rect x="0.1807%" y="245" width="0.0452%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="1"/><text x="0.4307%" y="255.50"></text></g><g><title>metadata-aebf7f20f32a140a`core::ptr::drop_in_place&lt;core::option::Option&lt;parquet::format::ColumnMetaData&gt;&gt; (2 samples, 0.09%)</title><rect x="0.2258%" y="245" width="0.0903%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="2"/><text x="0.4758%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_free (16 samples, 0.72%)</title><rect x="0.4517%" y="229" width="0.7227%" height="15" fill="rgb(228,23,34)" fg:x="10" fg:w="16"/><text x="0.7017%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.14%)</title><rect x="1.1743%" y="229" width="0.1355%" height="15" fill="rgb(218,30,26)" fg:x="26" fg:w="3"/><text x="1.4243%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (39 samples, 1.76%)</title><rect x="1.3098%" y="213" width="1.7615%" height="15" fill="rgb(220,122,19)" fg:x="29" fg:w="39"/><text x="1.5598%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (40 samples, 1.81%)</title><rect x="1.3098%" y="229" width="1.8067%" height="15" fill="rgb(250,228,42)" fg:x="29" fg:w="40"/><text x="1.5598%" y="239.50">l..</text></g><g><title>libsystem_malloc.dylib`free_large (1 samples, 0.05%)</title><rect x="3.0714%" y="213" width="0.0452%" height="15" fill="rgb(240,193,28)" fg:x="68" fg:w="1"/><text x="3.3214%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (1 samples, 0.05%)</title><rect x="3.0714%" y="197" width="0.0452%" height="15" fill="rgb(216,20,37)" fg:x="68" fg:w="1"/><text x="3.3214%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.05%)</title><rect x="3.0714%" y="181" width="0.0452%" height="15" fill="rgb(206,188,39)" fg:x="68" fg:w="1"/><text x="3.3214%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.05%)</title><rect x="3.1165%" y="229" width="0.0452%" height="15" fill="rgb(217,207,13)" fg:x="69" fg:w="1"/><text x="3.3665%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (1 samples, 0.05%)</title><rect x="3.1165%" y="213" width="0.0452%" height="15" fill="rgb(231,73,38)" fg:x="69" fg:w="1"/><text x="3.3665%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.05%)</title><rect x="3.1165%" y="197" width="0.0452%" height="15" fill="rgb(225,20,46)" fg:x="69" fg:w="1"/><text x="3.3665%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (135 samples, 6.10%)</title><rect x="3.1617%" y="229" width="6.0976%" height="15" fill="rgb(210,31,41)" fg:x="70" fg:w="135"/><text x="3.4117%" y="239.50">libsyste..</text></g><g><title>metadata-aebf7f20f32a140a`&lt;parquet::format::ColumnChunk as parquet::thrift::TSerializable&gt;::read_from_in_protocol (7 samples, 0.32%)</title><rect x="9.2593%" y="229" width="0.3162%" height="15" fill="rgb(221,200,47)" fg:x="205" fg:w="7"/><text x="9.5093%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.59%)</title><rect x="10.3884%" y="213" width="0.5872%" height="15" fill="rgb(226,26,5)" fg:x="230" fg:w="13"/><text x="10.6384%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (21 samples, 0.95%)</title><rect x="10.9756%" y="213" width="0.9485%" height="15" fill="rgb(249,33,26)" fg:x="243" fg:w="21"/><text x="11.2256%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (20 samples, 0.90%)</title><rect x="11.9241%" y="213" width="0.9033%" height="15" fill="rgb(235,183,28)" fg:x="264" fg:w="20"/><text x="12.1741%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (5 samples, 0.23%)</title><rect x="28.3198%" y="197" width="0.2258%" height="15" fill="rgb(221,5,38)" fg:x="627" fg:w="5"/><text x="28.5698%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.05%)</title><rect x="28.5005%" y="181" width="0.0452%" height="15" fill="rgb(247,18,42)" fg:x="631" fg:w="1"/><text x="28.7505%" y="191.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;parquet::thrift::TCompactSliceInputProtocol as thrift::protocol::TInputProtocol&gt;::read_field_begin (131 samples, 5.92%)</title><rect x="28.5456%" y="197" width="5.9169%" height="15" fill="rgb(241,131,45)" fg:x="632" fg:w="131"/><text x="28.7956%" y="207.50">metadata..</text></g><g><title>metadata-aebf7f20f32a140a`&lt;parquet::thrift::TCompactSliceInputProtocol as thrift::protocol::TInputProtocol&gt;::read_i32 (57 samples, 2.57%)</title><rect x="34.4625%" y="197" width="2.5745%" height="15" fill="rgb(249,31,29)" fg:x="763" fg:w="57"/><text x="34.7125%" y="207.50">me..</text></g><g><title>metadata-aebf7f20f32a140a`&lt;parquet::thrift::TCompactSliceInputProtocol as thrift::protocol::TInputProtocol&gt;::read_i64 (376 samples, 16.98%)</title><rect x="37.0370%" y="197" width="16.9828%" height="15" fill="rgb(225,111,53)" fg:x="820" fg:w="376"/><text x="37.2870%" y="207.50">metadata-aebf7f20f32a140a`..</text></g><g><title>metadata-aebf7f20f32a140a`&lt;parquet::thrift::TCompactSliceInputProtocol as thrift::protocol::TInputProtocol&gt;::read_list_begin (9 samples, 0.41%)</title><rect x="54.0199%" y="197" width="0.4065%" height="15" fill="rgb(238,160,17)" fg:x="1196" fg:w="9"/><text x="54.2699%" y="207.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;parquet::thrift::TCompactSliceInputProtocol as thrift::protocol::TInputProtocol&gt;::read_struct_begin (11 samples, 0.50%)</title><rect x="54.4264%" y="197" width="0.4968%" height="15" fill="rgb(214,148,48)" fg:x="1205" fg:w="11"/><text x="54.6764%" y="207.50"></text></g><g><title>metadata-aebf7f20f32a140a`core::ptr::drop_in_place&lt;core::option::Option&lt;parquet::format::ColumnMetaData&gt;&gt; (1 samples, 0.05%)</title><rect x="54.9232%" y="197" width="0.0452%" height="15" fill="rgb(232,36,49)" fg:x="1216" fg:w="1"/><text x="55.1732%" y="207.50"></text></g><g><title>metadata-aebf7f20f32a140a`thrift::protocol::field_id (21 samples, 0.95%)</title><rect x="54.9684%" y="197" width="0.9485%" height="15" fill="rgb(209,103,24)" fg:x="1217" fg:w="21"/><text x="55.2184%" y="207.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;parquet::format::ColumnChunk as parquet::thrift::TSerializable&gt;::read_from_in_protocol (969 samples, 43.77%)</title><rect x="12.8275%" y="213" width="43.7669%" height="15" fill="rgb(229,88,8)" fg:x="284" fg:w="969"/><text x="13.0775%" y="223.50">metadata-aebf7f20f32a140a`&lt;parquet::format::ColumnChunk as parquet::thri..</text></g><g><title>metadata-aebf7f20f32a140a`thrift::protocol::verify_required_field_exists (15 samples, 0.68%)</title><rect x="55.9169%" y="197" width="0.6775%" height="15" fill="rgb(213,181,19)" fg:x="1238" fg:w="15"/><text x="56.1669%" y="207.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;parquet::thrift::TCompactSliceInputProtocol as thrift::protocol::TInputProtocol&gt;::read_field_begin (33 samples, 1.49%)</title><rect x="56.5944%" y="213" width="1.4905%" height="15" fill="rgb(254,191,54)" fg:x="1253" fg:w="33"/><text x="56.8444%" y="223.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;parquet::thrift::TCompactSliceInputProtocol as thrift::protocol::TInputProtocol&gt;::read_i32 (10 samples, 0.45%)</title><rect x="58.0849%" y="213" width="0.4517%" height="15" fill="rgb(241,83,37)" fg:x="1286" fg:w="10"/><text x="58.3349%" y="223.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;parquet::thrift::TCompactSliceInputProtocol as thrift::protocol::TInputProtocol&gt;::read_i64 (22 samples, 0.99%)</title><rect x="58.5366%" y="213" width="0.9937%" height="15" fill="rgb(233,36,39)" fg:x="1296" fg:w="22"/><text x="58.7866%" y="223.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;parquet::thrift::TCompactSliceInputProtocol as thrift::protocol::TInputProtocol&gt;::read_list_begin (1 samples, 0.05%)</title><rect x="59.5303%" y="213" width="0.0452%" height="15" fill="rgb(226,3,54)" fg:x="1318" fg:w="1"/><text x="59.7803%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.05%)</title><rect x="59.6206%" y="197" width="0.0452%" height="15" fill="rgb(245,192,40)" fg:x="1320" fg:w="1"/><text x="59.8706%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.05%)</title><rect x="59.6658%" y="197" width="0.0452%" height="15" fill="rgb(238,167,29)" fg:x="1321" fg:w="1"/><text x="59.9158%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.05%)</title><rect x="59.7109%" y="197" width="0.0452%" height="15" fill="rgb(232,182,51)" fg:x="1322" fg:w="1"/><text x="59.9609%" y="207.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;parquet::thrift::TCompactSliceInputProtocol as thrift::protocol::TInputProtocol&gt;::read_bytes (2 samples, 0.09%)</title><rect x="59.7561%" y="197" width="0.0903%" height="15" fill="rgb(231,60,39)" fg:x="1323" fg:w="2"/><text x="60.0061%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (2 samples, 0.09%)</title><rect x="59.7561%" y="181" width="0.0903%" height="15" fill="rgb(208,69,12)" fg:x="1323" fg:w="2"/><text x="60.0061%" y="191.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;parquet::thrift::TCompactSliceInputProtocol as thrift::protocol::TInputProtocol&gt;::read_string (7 samples, 0.32%)</title><rect x="59.5754%" y="213" width="0.3162%" height="15" fill="rgb(235,93,37)" fg:x="1319" fg:w="7"/><text x="59.8254%" y="223.50"></text></g><g><title>metadata-aebf7f20f32a140a`DYLD-STUB$$memcpy (1 samples, 0.05%)</title><rect x="59.8464%" y="197" width="0.0452%" height="15" fill="rgb(213,116,39)" fg:x="1325" fg:w="1"/><text x="60.0964%" y="207.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;parquet::thrift::TCompactSliceInputProtocol as thrift::protocol::TInputProtocol&gt;::read_struct_begin (6 samples, 0.27%)</title><rect x="59.8916%" y="213" width="0.2710%" height="15" fill="rgb(222,207,29)" fg:x="1326" fg:w="6"/><text x="60.1416%" y="223.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;parquet::thrift::TCompactSliceInputProtocol as thrift::protocol::TInputProtocol&gt;::read_struct_end (7 samples, 0.32%)</title><rect x="60.1626%" y="213" width="0.3162%" height="15" fill="rgb(206,96,30)" fg:x="1332" fg:w="7"/><text x="60.4126%" y="223.50"></text></g><g><title>metadata-aebf7f20f32a140a`DYLD-STUB$$malloc (4 samples, 0.18%)</title><rect x="60.4788%" y="213" width="0.1807%" height="15" fill="rgb(218,138,4)" fg:x="1339" fg:w="4"/><text x="60.7288%" y="223.50"></text></g><g><title>metadata-aebf7f20f32a140a`DYLD-STUB$$memcpy (3 samples, 0.14%)</title><rect x="60.6594%" y="213" width="0.1355%" height="15" fill="rgb(250,191,14)" fg:x="1343" fg:w="3"/><text x="60.9094%" y="223.50"></text></g><g><title>metadata-aebf7f20f32a140a`__rdl_alloc (2 samples, 0.09%)</title><rect x="60.7949%" y="213" width="0.0903%" height="15" fill="rgb(239,60,40)" fg:x="1346" fg:w="2"/><text x="61.0449%" y="223.50"></text></g><g><title>metadata-aebf7f20f32a140a`core::ptr::drop_in_place&lt;core::option::Option&lt;parquet::format::ColumnMetaData&gt;&gt; (13 samples, 0.59%)</title><rect x="60.8853%" y="213" width="0.5872%" height="15" fill="rgb(206,27,48)" fg:x="1348" fg:w="13"/><text x="61.1353%" y="223.50"></text></g><g><title>metadata-aebf7f20f32a140a`thrift::protocol::field_id (45 samples, 2.03%)</title><rect x="61.4724%" y="213" width="2.0325%" height="15" fill="rgb(225,35,8)" fg:x="1361" fg:w="45"/><text x="61.7224%" y="223.50">m..</text></g><g><title>metadata-aebf7f20f32a140a`&lt;parquet::format::FileMetaData as parquet::thrift::TSerializable&gt;::read_from_in_protocol (1,211 samples, 54.70%)</title><rect x="9.5754%" y="229" width="54.6974%" height="15" fill="rgb(250,213,24)" fg:x="212" fg:w="1211"/><text x="9.8254%" y="239.50">metadata-aebf7f20f32a140a`&lt;parquet::format::FileMetaData as parquet::thrift::TSerializable..</text></g><g><title>metadata-aebf7f20f32a140a`thrift::protocol::verify_required_field_exists (17 samples, 0.77%)</title><rect x="63.5050%" y="213" width="0.7678%" height="15" fill="rgb(247,123,22)" fg:x="1406" fg:w="17"/><text x="63.7550%" y="223.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;parquet::thrift::TCompactSliceInputProtocol as thrift::protocol::TInputProtocol&gt;::read_string (1 samples, 0.05%)</title><rect x="64.2728%" y="229" width="0.0452%" height="15" fill="rgb(231,138,38)" fg:x="1423" fg:w="1"/><text x="64.5228%" y="239.50"></text></g><g><title>metadata-aebf7f20f32a140a`DYLD-STUB$$free (5 samples, 0.23%)</title><rect x="64.3180%" y="229" width="0.2258%" height="15" fill="rgb(231,145,46)" fg:x="1424" fg:w="5"/><text x="64.5680%" y="239.50"></text></g><g><title>metadata-aebf7f20f32a140a`DYLD-STUB$$memcpy (2 samples, 0.09%)</title><rect x="64.5438%" y="229" width="0.0903%" height="15" fill="rgb(251,118,11)" fg:x="1429" fg:w="2"/><text x="64.7938%" y="239.50"></text></g><g><title>metadata-aebf7f20f32a140a`core::ptr::drop_in_place&lt;core::option::Option&lt;parquet::format::ColumnCryptoMetaData&gt;&gt; (1 samples, 0.05%)</title><rect x="64.6341%" y="229" width="0.0452%" height="15" fill="rgb(217,147,25)" fg:x="1431" fg:w="1"/><text x="64.8841%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (24 samples, 1.08%)</title><rect x="65.0407%" y="213" width="1.0840%" height="15" fill="rgb(247,81,37)" fg:x="1440" fg:w="24"/><text x="65.2907%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (6 samples, 0.27%)</title><rect x="66.1247%" y="213" width="0.2710%" height="15" fill="rgb(209,12,38)" fg:x="1464" fg:w="6"/><text x="66.3747%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (6 samples, 0.27%)</title><rect x="66.1247%" y="197" width="0.2710%" height="15" fill="rgb(227,1,9)" fg:x="1464" fg:w="6"/><text x="66.3747%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.27%)</title><rect x="66.1247%" y="181" width="0.2710%" height="15" fill="rgb(248,47,43)" fg:x="1464" fg:w="6"/><text x="66.3747%" y="191.50"></text></g><g><title>metadata-aebf7f20f32a140a`core::ptr::drop_in_place&lt;core::option::Option&lt;parquet::format::ColumnMetaData&gt;&gt; (39 samples, 1.76%)</title><rect x="64.6793%" y="229" width="1.7615%" height="15" fill="rgb(221,10,30)" fg:x="1432" fg:w="39"/><text x="64.9293%" y="239.50"></text></g><g><title>metadata-aebf7f20f32a140a`core::ptr::drop_in_place&lt;core::option::Option&lt;parquet::format::Statistics&gt;&gt; (1 samples, 0.05%)</title><rect x="66.3957%" y="213" width="0.0452%" height="15" fill="rgb(210,229,1)" fg:x="1470" fg:w="1"/><text x="66.6457%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.05%)</title><rect x="66.4408%" y="213" width="0.0452%" height="15" fill="rgb(222,148,37)" fg:x="1471" fg:w="1"/><text x="66.6908%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.14%)</title><rect x="66.4860%" y="213" width="0.1355%" height="15" fill="rgb(234,67,33)" fg:x="1472" fg:w="3"/><text x="66.7360%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.09%)</title><rect x="66.6215%" y="165" width="0.0903%" height="15" fill="rgb(247,98,35)" fg:x="1475" fg:w="2"/><text x="66.8715%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.14%)</title><rect x="66.7118%" y="165" width="0.1355%" height="15" fill="rgb(247,138,52)" fg:x="1477" fg:w="3"/><text x="66.9618%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (35 samples, 1.58%)</title><rect x="66.8473%" y="165" width="1.5808%" height="15" fill="rgb(213,79,30)" fg:x="1480" fg:w="35"/><text x="67.0973%" y="175.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (19 samples, 0.86%)</title><rect x="68.4282%" y="165" width="0.8582%" height="15" fill="rgb(246,177,23)" fg:x="1515" fg:w="19"/><text x="68.6782%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (3 samples, 0.14%)</title><rect x="69.1509%" y="149" width="0.1355%" height="15" fill="rgb(230,62,27)" fg:x="1531" fg:w="3"/><text x="69.4009%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.05%)</title><rect x="69.2412%" y="133" width="0.0452%" height="15" fill="rgb(216,154,8)" fg:x="1533" fg:w="1"/><text x="69.4912%" y="143.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (161 samples, 7.27%)</title><rect x="66.6215%" y="213" width="7.2719%" height="15" fill="rgb(244,35,45)" fg:x="1475" fg:w="161"/><text x="66.8715%" y="223.50">metadata-a..</text></g><g><title>metadata-aebf7f20f32a140a`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (161 samples, 7.27%)</title><rect x="66.6215%" y="197" width="7.2719%" height="15" fill="rgb(251,115,12)" fg:x="1475" fg:w="161"/><text x="66.8715%" y="207.50">metadata-a..</text></g><g><title>metadata-aebf7f20f32a140a`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (161 samples, 7.27%)</title><rect x="66.6215%" y="181" width="7.2719%" height="15" fill="rgb(240,54,50)" fg:x="1475" fg:w="161"/><text x="66.8715%" y="191.50">metadata-a..</text></g><g><title>metadata-aebf7f20f32a140a`rand_core::block::BlockRng&lt;R&gt;::generate_and_set (102 samples, 4.61%)</title><rect x="69.2864%" y="165" width="4.6070%" height="15" fill="rgb(233,84,52)" fg:x="1534" fg:w="102"/><text x="69.5364%" y="175.50">metad..</text></g><g><title>libsystem_malloc.dylib`_free (14 samples, 0.63%)</title><rect x="74.0289%" y="197" width="0.6323%" height="15" fill="rgb(207,117,47)" fg:x="1639" fg:w="14"/><text x="74.2789%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.18%)</title><rect x="74.6612%" y="197" width="0.1807%" height="15" fill="rgb(249,43,39)" fg:x="1653" fg:w="4"/><text x="74.9112%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.14%)</title><rect x="74.8419%" y="197" width="0.1355%" height="15" fill="rgb(209,38,44)" fg:x="1657" fg:w="3"/><text x="75.0919%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.23%)</title><rect x="74.9774%" y="197" width="0.2258%" height="15" fill="rgb(236,212,23)" fg:x="1660" fg:w="5"/><text x="75.2274%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.05%)</title><rect x="75.2033%" y="197" width="0.0452%" height="15" fill="rgb(242,79,21)" fg:x="1665" fg:w="1"/><text x="75.4533%" y="207.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;Inner as integer_encoding::writer::VarIntWriter&gt;::write_varint (2 samples, 0.09%)</title><rect x="75.2484%" y="197" width="0.0903%" height="15" fill="rgb(211,96,35)" fg:x="1666" fg:w="2"/><text x="75.4984%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (3 samples, 0.14%)</title><rect x="76.8293%" y="181" width="0.1355%" height="15" fill="rgb(253,215,40)" fg:x="1701" fg:w="3"/><text x="77.0793%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_free (24 samples, 1.08%)</title><rect x="76.9648%" y="181" width="1.0840%" height="15" fill="rgb(211,81,21)" fg:x="1704" fg:w="24"/><text x="77.2148%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.72%)</title><rect x="78.0488%" y="181" width="0.7227%" height="15" fill="rgb(208,190,38)" fg:x="1728" fg:w="16"/><text x="78.2988%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (33 samples, 1.49%)</title><rect x="78.7715%" y="181" width="1.4905%" height="15" fill="rgb(235,213,38)" fg:x="1744" fg:w="33"/><text x="79.0215%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (20 samples, 0.90%)</title><rect x="80.2620%" y="181" width="0.9033%" height="15" fill="rgb(237,122,38)" fg:x="1777" fg:w="20"/><text x="80.5120%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (21 samples, 0.95%)</title><rect x="81.1653%" y="181" width="0.9485%" height="15" fill="rgb(244,218,35)" fg:x="1797" fg:w="21"/><text x="81.4153%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.05%)</title><rect x="82.1138%" y="181" width="0.0452%" height="15" fill="rgb(240,68,47)" fg:x="1818" fg:w="1"/><text x="82.3638%" y="191.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;Inner as integer_encoding::writer::VarIntWriter&gt;::write_varint (1 samples, 0.05%)</title><rect x="82.1590%" y="181" width="0.0452%" height="15" fill="rgb(210,16,53)" fg:x="1819" fg:w="1"/><text x="82.4090%" y="191.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;i32 as integer_encoding::varint::VarInt&gt;::encode_var (2 samples, 0.09%)</title><rect x="82.2042%" y="181" width="0.0903%" height="15" fill="rgb(235,124,12)" fg:x="1820" fg:w="2"/><text x="82.4542%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (24 samples, 1.08%)</title><rect x="83.3333%" y="165" width="1.0840%" height="15" fill="rgb(224,169,11)" fg:x="1845" fg:w="24"/><text x="83.5833%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (32 samples, 1.45%)</title><rect x="84.4173%" y="165" width="1.4453%" height="15" fill="rgb(250,166,2)" fg:x="1869" fg:w="32"/><text x="84.6673%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (32 samples, 1.45%)</title><rect x="85.8627%" y="165" width="1.4453%" height="15" fill="rgb(242,216,29)" fg:x="1901" fg:w="32"/><text x="86.1127%" y="175.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.09%)</title><rect x="87.3080%" y="165" width="0.0903%" height="15" fill="rgb(230,116,27)" fg:x="1933" fg:w="2"/><text x="87.5580%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.59%)</title><rect x="87.3984%" y="165" width="0.5872%" height="15" fill="rgb(228,99,48)" fg:x="1935" fg:w="13"/><text x="87.6484%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.09%)</title><rect x="87.9855%" y="165" width="0.0903%" height="15" fill="rgb(253,11,6)" fg:x="1948" fg:w="2"/><text x="88.2355%" y="175.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;Inner as integer_encoding::writer::VarIntWriter&gt;::write_varint (2 samples, 0.09%)</title><rect x="88.0759%" y="165" width="0.0903%" height="15" fill="rgb(247,143,39)" fg:x="1950" fg:w="2"/><text x="88.3259%" y="175.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;i32 as integer_encoding::varint::VarInt&gt;::encode_var (5 samples, 0.23%)</title><rect x="88.1662%" y="165" width="0.2258%" height="15" fill="rgb(236,97,10)" fg:x="1952" fg:w="5"/><text x="88.4162%" y="175.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;thrift::protocol::compact::TCompactOutputProtocol&lt;T&gt; as thrift::protocol::TOutputProtocol&gt;::write_field_begin (14 samples, 0.63%)</title><rect x="88.3921%" y="165" width="0.6323%" height="15" fill="rgb(233,208,19)" fg:x="1957" fg:w="14"/><text x="88.6421%" y="175.50"></text></g><g><title>metadata-aebf7f20f32a140a`thrift::protocol::compact::type_to_u8 (7 samples, 0.32%)</title><rect x="88.7082%" y="149" width="0.3162%" height="15" fill="rgb(216,164,2)" fg:x="1964" fg:w="7"/><text x="88.9582%" y="159.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;thrift::protocol::compact::TCompactOutputProtocol&lt;T&gt; as thrift::protocol::TOutputProtocol&gt;::write_i32 (2 samples, 0.09%)</title><rect x="89.0244%" y="165" width="0.0903%" height="15" fill="rgb(220,129,5)" fg:x="1971" fg:w="2"/><text x="89.2744%" y="175.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;i32 as integer_encoding::varint::VarInt&gt;::encode_var (1 samples, 0.05%)</title><rect x="89.0696%" y="149" width="0.0452%" height="15" fill="rgb(242,17,10)" fg:x="1972" fg:w="1"/><text x="89.3196%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.63%)</title><rect x="89.1147%" y="149" width="0.6323%" height="15" fill="rgb(242,107,0)" fg:x="1973" fg:w="14"/><text x="89.3647%" y="159.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;Inner as integer_encoding::writer::VarIntWriter&gt;::write_varint (52 samples, 2.35%)</title><rect x="89.7471%" y="149" width="2.3487%" height="15" fill="rgb(251,28,31)" fg:x="1987" fg:w="52"/><text x="89.9971%" y="159.50">m..</text></g><g><title>metadata-aebf7f20f32a140a`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.05%)</title><rect x="92.0506%" y="133" width="0.0452%" height="15" fill="rgb(233,223,10)" fg:x="2038" fg:w="1"/><text x="92.3006%" y="143.50"></text></g><g><title>metadata-aebf7f20f32a140a`alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="92.0506%" y="117" width="0.0452%" height="15" fill="rgb(215,21,27)" fg:x="2038" fg:w="1"/><text x="92.3006%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.05%)</title><rect x="92.0506%" y="101" width="0.0452%" height="15" fill="rgb(232,23,21)" fg:x="2038" fg:w="1"/><text x="92.3006%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.05%)</title><rect x="92.0506%" y="85" width="0.0452%" height="15" fill="rgb(244,5,23)" fg:x="2038" fg:w="1"/><text x="92.3006%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.05%)</title><rect x="92.0506%" y="69" width="0.0452%" height="15" fill="rgb(226,81,46)" fg:x="2038" fg:w="1"/><text x="92.3006%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (1 samples, 0.05%)</title><rect x="92.0506%" y="53" width="0.0452%" height="15" fill="rgb(247,70,30)" fg:x="2038" fg:w="1"/><text x="92.3006%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (1 samples, 0.05%)</title><rect x="92.0506%" y="37" width="0.0452%" height="15" fill="rgb(212,68,19)" fg:x="2038" fg:w="1"/><text x="92.3006%" y="47.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;thrift::protocol::compact::TCompactOutputProtocol&lt;T&gt; as thrift::protocol::TOutputProtocol&gt;::write_i64 (69 samples, 3.12%)</title><rect x="89.1147%" y="165" width="3.1165%" height="15" fill="rgb(240,187,13)" fg:x="1973" fg:w="69"/><text x="89.3647%" y="175.50">met..</text></g><g><title>metadata-aebf7f20f32a140a`DYLD-STUB$$memcpy (3 samples, 0.14%)</title><rect x="92.0958%" y="149" width="0.1355%" height="15" fill="rgb(223,113,26)" fg:x="2039" fg:w="3"/><text x="92.3458%" y="159.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;thrift::protocol::compact::TCompactOutputProtocol&lt;T&gt; as thrift::protocol::TOutputProtocol&gt;::write_struct_end (2 samples, 0.09%)</title><rect x="92.2313%" y="165" width="0.0903%" height="15" fill="rgb(206,192,2)" fg:x="2042" fg:w="2"/><text x="92.4813%" y="175.50"></text></g><g><title>metadata-aebf7f20f32a140a`DYLD-STUB$$malloc (1 samples, 0.05%)</title><rect x="92.3216%" y="165" width="0.0452%" height="15" fill="rgb(241,108,4)" fg:x="2044" fg:w="1"/><text x="92.5716%" y="175.50"></text></g><g><title>metadata-aebf7f20f32a140a`DYLD-STUB$$memcpy (5 samples, 0.23%)</title><rect x="92.3668%" y="165" width="0.2258%" height="15" fill="rgb(247,173,49)" fg:x="2045" fg:w="5"/><text x="92.6168%" y="175.50"></text></g><g><title>metadata-aebf7f20f32a140a`__rdl_alloc (4 samples, 0.18%)</title><rect x="92.5926%" y="165" width="0.1807%" height="15" fill="rgb(224,114,35)" fg:x="2050" fg:w="4"/><text x="92.8426%" y="175.50"></text></g><g><title>metadata-aebf7f20f32a140a`thrift::protocol::TFieldIdentifier::new (7 samples, 0.32%)</title><rect x="92.7733%" y="165" width="0.3162%" height="15" fill="rgb(245,159,27)" fg:x="2054" fg:w="7"/><text x="93.0233%" y="175.50"></text></g><g><title>metadata-aebf7f20f32a140a`thrift::protocol::compact::TCompactOutputProtocol&lt;T&gt;::write_field_header (15 samples, 0.68%)</title><rect x="93.0894%" y="165" width="0.6775%" height="15" fill="rgb(245,172,44)" fg:x="2061" fg:w="15"/><text x="93.3394%" y="175.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;parquet::format::ColumnMetaData as parquet::thrift::TSerializable&gt;::write_to_out_protocol (256 samples, 11.56%)</title><rect x="82.2945%" y="181" width="11.5628%" height="15" fill="rgb(236,23,11)" fg:x="1822" fg:w="256"/><text x="82.5445%" y="191.50">metadata-aebf7f20..</text></g><g><title>metadata-aebf7f20f32a140a`thrift::protocol::compact::collection_type_to_u8 (2 samples, 0.09%)</title><rect x="93.7669%" y="165" width="0.0903%" height="15" fill="rgb(205,117,38)" fg:x="2076" fg:w="2"/><text x="94.0169%" y="175.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;thrift::protocol::compact::TCompactOutputProtocol&lt;T&gt; as thrift::protocol::TOutputProtocol&gt;::write_field_begin (8 samples, 0.36%)</title><rect x="93.8573%" y="181" width="0.3613%" height="15" fill="rgb(237,72,25)" fg:x="2078" fg:w="8"/><text x="94.1073%" y="191.50"></text></g><g><title>metadata-aebf7f20f32a140a`thrift::protocol::compact::type_to_u8 (6 samples, 0.27%)</title><rect x="93.9476%" y="165" width="0.2710%" height="15" fill="rgb(244,70,9)" fg:x="2080" fg:w="6"/><text x="94.1976%" y="175.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;thrift::protocol::compact::TCompactOutputProtocol&lt;T&gt; as thrift::protocol::TOutputProtocol&gt;::write_field_end (2 samples, 0.09%)</title><rect x="94.2186%" y="181" width="0.0903%" height="15" fill="rgb(217,125,39)" fg:x="2086" fg:w="2"/><text x="94.4686%" y="191.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;thrift::protocol::compact::TCompactOutputProtocol&lt;T&gt; as thrift::protocol::TOutputProtocol&gt;::write_i32 (7 samples, 0.32%)</title><rect x="94.3089%" y="181" width="0.3162%" height="15" fill="rgb(235,36,10)" fg:x="2088" fg:w="7"/><text x="94.5589%" y="191.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;i32 as integer_encoding::varint::VarInt&gt;::encode_var (5 samples, 0.23%)</title><rect x="94.3993%" y="165" width="0.2258%" height="15" fill="rgb(251,123,47)" fg:x="2090" fg:w="5"/><text x="94.6493%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.18%)</title><rect x="94.9413%" y="165" width="0.1807%" height="15" fill="rgb(221,13,13)" fg:x="2102" fg:w="4"/><text x="95.1913%" y="175.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;thrift::protocol::compact::TCompactOutputProtocol&lt;T&gt; as thrift::protocol::TOutputProtocol&gt;::write_i64 (28 samples, 1.26%)</title><rect x="94.6251%" y="181" width="1.2647%" height="15" fill="rgb(238,131,9)" fg:x="2095" fg:w="28"/><text x="94.8751%" y="191.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;Inner as integer_encoding::writer::VarIntWriter&gt;::write_varint (17 samples, 0.77%)</title><rect x="95.1220%" y="165" width="0.7678%" height="15" fill="rgb(211,50,8)" fg:x="2106" fg:w="17"/><text x="95.3720%" y="175.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;thrift::protocol::compact::TCompactOutputProtocol&lt;T&gt; as thrift::protocol::TOutputProtocol&gt;::write_list_begin (2 samples, 0.09%)</title><rect x="95.8898%" y="181" width="0.0903%" height="15" fill="rgb(245,182,24)" fg:x="2123" fg:w="2"/><text x="96.1398%" y="191.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;thrift::protocol::compact::TCompactOutputProtocol&lt;T&gt; as thrift::protocol::TOutputProtocol&gt;::write_struct_end (1 samples, 0.05%)</title><rect x="95.9801%" y="181" width="0.0452%" height="15" fill="rgb(242,14,37)" fg:x="2125" fg:w="1"/><text x="96.2301%" y="191.50"></text></g><g><title>metadata-aebf7f20f32a140a`DYLD-STUB$$free (4 samples, 0.18%)</title><rect x="96.0253%" y="181" width="0.1807%" height="15" fill="rgb(246,228,12)" fg:x="2126" fg:w="4"/><text x="96.2753%" y="191.50"></text></g><g><title>metadata-aebf7f20f32a140a`DYLD-STUB$$malloc (2 samples, 0.09%)</title><rect x="96.2060%" y="181" width="0.0903%" height="15" fill="rgb(213,55,15)" fg:x="2130" fg:w="2"/><text x="96.4560%" y="191.50"></text></g><g><title>metadata-aebf7f20f32a140a`DYLD-STUB$$memcpy (4 samples, 0.18%)</title><rect x="96.2963%" y="181" width="0.1807%" height="15" fill="rgb(209,9,3)" fg:x="2132" fg:w="4"/><text x="96.5463%" y="191.50"></text></g><g><title>metadata-aebf7f20f32a140a`thrift::protocol::TFieldIdentifier::new (9 samples, 0.41%)</title><rect x="96.4770%" y="181" width="0.4065%" height="15" fill="rgb(230,59,30)" fg:x="2136" fg:w="9"/><text x="96.7270%" y="191.50"></text></g><g><title>metadata-aebf7f20f32a140a`thrift::protocol::compact::TCompactOutputProtocol&lt;T&gt;::write_field_header (16 samples, 0.72%)</title><rect x="96.8835%" y="181" width="0.7227%" height="15" fill="rgb(209,121,21)" fg:x="2145" fg:w="16"/><text x="97.1335%" y="191.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;parquet::format::RowGroup as parquet::thrift::TSerializable&gt;::write_to_out_protocol (494 samples, 22.31%)</title><rect x="75.3388%" y="197" width="22.3126%" height="15" fill="rgb(220,109,13)" fg:x="1668" fg:w="494"/><text x="75.5888%" y="207.50">metadata-aebf7f20f32a140a`&lt;parquet:..</text></g><g><title>metadata-aebf7f20f32a140a`thrift::protocol::compact::type_to_u8 (1 samples, 0.05%)</title><rect x="97.6061%" y="181" width="0.0452%" height="15" fill="rgb(232,18,1)" fg:x="2161" fg:w="1"/><text x="97.8561%" y="191.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;thrift::protocol::compact::TCompactOutputProtocol&lt;T&gt; as thrift::protocol::TOutputProtocol&gt;::write_field_end (2 samples, 0.09%)</title><rect x="97.6513%" y="197" width="0.0903%" height="15" fill="rgb(215,41,42)" fg:x="2162" fg:w="2"/><text x="97.9013%" y="207.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;thrift::protocol::compact::TCompactOutputProtocol&lt;T&gt; as thrift::protocol::TOutputProtocol&gt;::write_field_stop (1 samples, 0.05%)</title><rect x="97.7416%" y="197" width="0.0452%" height="15" fill="rgb(224,123,36)" fg:x="2164" fg:w="1"/><text x="97.9916%" y="207.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;thrift::protocol::compact::TCompactOutputProtocol&lt;T&gt; as thrift::protocol::TOutputProtocol&gt;::write_i32 (1 samples, 0.05%)</title><rect x="97.7868%" y="197" width="0.0452%" height="15" fill="rgb(240,125,3)" fg:x="2165" fg:w="1"/><text x="98.0368%" y="207.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;thrift::protocol::compact::TCompactOutputProtocol&lt;T&gt; as thrift::protocol::TOutputProtocol&gt;::write_i64 (3 samples, 0.14%)</title><rect x="97.8320%" y="197" width="0.1355%" height="15" fill="rgb(205,98,50)" fg:x="2166" fg:w="3"/><text x="98.0820%" y="207.50"></text></g><g><title>metadata-aebf7f20f32a140a`DYLD-STUB$$free (4 samples, 0.18%)</title><rect x="97.9675%" y="197" width="0.1807%" height="15" fill="rgb(205,185,37)" fg:x="2169" fg:w="4"/><text x="98.2175%" y="207.50"></text></g><g><title>metadata-aebf7f20f32a140a`DYLD-STUB$$malloc (1 samples, 0.05%)</title><rect x="98.1481%" y="197" width="0.0452%" height="15" fill="rgb(238,207,15)" fg:x="2173" fg:w="1"/><text x="98.3981%" y="207.50"></text></g><g><title>metadata-aebf7f20f32a140a`thrift::protocol::TFieldIdentifier::new (3 samples, 0.14%)</title><rect x="98.1933%" y="197" width="0.1355%" height="15" fill="rgb(213,199,42)" fg:x="2174" fg:w="3"/><text x="98.4433%" y="207.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;parquet::format::FileMetaData as parquet::thrift::TSerializable&gt;::write_to_out_protocol (546 samples, 24.66%)</title><rect x="73.8934%" y="213" width="24.6612%" height="15" fill="rgb(235,201,11)" fg:x="1636" fg:w="546"/><text x="74.1434%" y="223.50">metadata-aebf7f20f32a140a`&lt;parquet::for..</text></g><g><title>metadata-aebf7f20f32a140a`thrift::protocol::compact::TCompactOutputProtocol&lt;T&gt;::write_field_header (5 samples, 0.23%)</title><rect x="98.3288%" y="197" width="0.2258%" height="15" fill="rgb(207,46,11)" fg:x="2177" fg:w="5"/><text x="98.5788%" y="207.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;thrift::protocol::compact::TCompactOutputProtocol&lt;T&gt; as thrift::protocol::TOutputProtocol&gt;::write_field_end (1 samples, 0.05%)</title><rect x="98.5547%" y="213" width="0.0452%" height="15" fill="rgb(241,35,35)" fg:x="2182" fg:w="1"/><text x="98.8047%" y="223.50"></text></g><g><title>metadata-aebf7f20f32a140a`core::fmt::num::imp::_&lt;impl core::fmt::Display for u64&gt;::fmt (3 samples, 0.14%)</title><rect x="98.5998%" y="213" width="0.1355%" height="15" fill="rgb(243,32,47)" fg:x="2183" fg:w="3"/><text x="98.8498%" y="223.50"></text></g><g><title>metadata-aebf7f20f32a140a`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.09%)</title><rect x="98.6450%" y="197" width="0.0903%" height="15" fill="rgb(247,202,23)" fg:x="2184" fg:w="2"/><text x="98.8950%" y="207.50"></text></g><g><title>metadata-aebf7f20f32a140a`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.05%)</title><rect x="98.6902%" y="181" width="0.0452%" height="15" fill="rgb(219,102,11)" fg:x="2185" fg:w="1"/><text x="98.9402%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.05%)</title><rect x="98.6902%" y="165" width="0.0452%" height="15" fill="rgb(243,110,44)" fg:x="2185" fg:w="1"/><text x="98.9402%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (9 samples, 0.41%)</title><rect x="98.7353%" y="181" width="0.4065%" height="15" fill="rgb(222,74,54)" fg:x="2186" fg:w="9"/><text x="98.9853%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (9 samples, 0.41%)</title><rect x="98.7353%" y="165" width="0.4065%" height="15" fill="rgb(216,99,12)" fg:x="2186" fg:w="9"/><text x="98.9853%" y="175.50"></text></g><g><title>metadata-aebf7f20f32a140a`core::ptr::drop_in_place&lt;core::option::Option&lt;parquet::format::ColumnMetaData&gt;&gt; (1 samples, 0.05%)</title><rect x="99.1418%" y="181" width="0.0452%" height="15" fill="rgb(226,22,26)" fg:x="2195" fg:w="1"/><text x="99.3918%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_free (2 samples, 0.09%)</title><rect x="99.2322%" y="165" width="0.0903%" height="15" fill="rgb(217,163,10)" fg:x="2197" fg:w="2"/><text x="99.4822%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.18%)</title><rect x="99.5032%" y="149" width="0.1807%" height="15" fill="rgb(213,25,53)" fg:x="2203" fg:w="4"/><text x="99.7532%" y="159.50"></text></g><g><title>metadata-aebf7f20f32a140a`core::ptr::drop_in_place&lt;core::option::Option&lt;parquet::format::ColumnMetaData&gt;&gt; (9 samples, 0.41%)</title><rect x="99.3225%" y="165" width="0.4065%" height="15" fill="rgb(252,105,26)" fg:x="2199" fg:w="9"/><text x="99.5725%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.05%)</title><rect x="99.6838%" y="149" width="0.0452%" height="15" fill="rgb(220,39,43)" fg:x="2207" fg:w="1"/><text x="99.9338%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (1 samples, 0.05%)</title><rect x="99.6838%" y="133" width="0.0452%" height="15" fill="rgb(229,68,48)" fg:x="2207" fg:w="1"/><text x="99.9338%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.05%)</title><rect x="99.6838%" y="117" width="0.0452%" height="15" fill="rgb(252,8,32)" fg:x="2207" fg:w="1"/><text x="99.9338%" y="127.50"></text></g><g><title>dyld`start (2,209 samples, 99.77%)</title><rect x="0.0000%" y="325" width="99.7742%" height="15" fill="rgb(223,20,43)" fg:x="0" fg:w="2209"/><text x="0.2500%" y="335.50">dyld`start</text></g><g><title>metadata-aebf7f20f32a140a`main (2,208 samples, 99.73%)</title><rect x="0.0452%" y="309" width="99.7290%" height="15" fill="rgb(229,81,49)" fg:x="1" fg:w="2208"/><text x="0.2952%" y="319.50">metadata-aebf7f20f32a140a`main</text></g><g><title>metadata-aebf7f20f32a140a`std::rt::lang_start_internal (2,208 samples, 99.73%)</title><rect x="0.0452%" y="293" width="99.7290%" height="15" fill="rgb(236,28,36)" fg:x="1" fg:w="2208"/><text x="0.2952%" y="303.50">metadata-aebf7f20f32a140a`std::rt::lang_start_internal</text></g><g><title>metadata-aebf7f20f32a140a`std::rt::lang_start::_{{closure}} (2,208 samples, 99.73%)</title><rect x="0.0452%" y="277" width="99.7290%" height="15" fill="rgb(249,185,26)" fg:x="1" fg:w="2208"/><text x="0.2952%" y="287.50">metadata-aebf7f20f32a140a`std::rt::lang_start::_{{closure}}</text></g><g><title>metadata-aebf7f20f32a140a`std::sys_common::backtrace::__rust_begin_short_backtrace (2,208 samples, 99.73%)</title><rect x="0.0452%" y="261" width="99.7290%" height="15" fill="rgb(249,174,33)" fg:x="1" fg:w="2208"/><text x="0.2952%" y="271.50">metadata-aebf7f20f32a140a`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>metadata-aebf7f20f32a140a`metadata::main (2,202 samples, 99.46%)</title><rect x="0.3162%" y="245" width="99.4580%" height="15" fill="rgb(233,201,37)" fg:x="7" fg:w="2202"/><text x="0.5662%" y="255.50">metadata-aebf7f20f32a140a`metadata::main</text></g><g><title>metadata-aebf7f20f32a140a`format_study::encode_parquet_meta (738 samples, 33.33%)</title><rect x="66.4408%" y="229" width="33.3333%" height="15" fill="rgb(221,78,26)" fg:x="1471" fg:w="738"/><text x="66.6908%" y="239.50">metadata-aebf7f20f32a140a`format_study::encode_parquet..</text></g><g><title>metadata-aebf7f20f32a140a`core::ptr::drop_in_place&lt;parquet::format::FileMetaData&gt; (23 samples, 1.04%)</title><rect x="98.7353%" y="213" width="1.0388%" height="15" fill="rgb(250,127,30)" fg:x="2186" fg:w="23"/><text x="98.9853%" y="223.50"></text></g><g><title>metadata-aebf7f20f32a140a`core::ptr::drop_in_place&lt;parquet::format::RowGroup&gt; (23 samples, 1.04%)</title><rect x="98.7353%" y="197" width="1.0388%" height="15" fill="rgb(230,49,44)" fg:x="2186" fg:w="23"/><text x="98.9853%" y="207.50"></text></g><g><title>metadata-aebf7f20f32a140a`core::ptr::drop_in_place&lt;parquet::format::ColumnChunk&gt; (13 samples, 0.59%)</title><rect x="99.1870%" y="181" width="0.5872%" height="15" fill="rgb(229,67,23)" fg:x="2196" fg:w="13"/><text x="99.4370%" y="191.50"></text></g><g><title>metadata-aebf7f20f32a140a`core::ptr::drop_in_place&lt;core::option::Option&lt;parquet::format::Statistics&gt;&gt; (1 samples, 0.05%)</title><rect x="99.7290%" y="165" width="0.0452%" height="15" fill="rgb(249,83,47)" fg:x="2208" fg:w="1"/><text x="99.9790%" y="175.50"></text></g><g><title>all (2,214 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(215,43,3)" fg:x="0" fg:w="2214"/><text x="0.2500%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`__exit (5 samples, 0.23%)</title><rect x="99.7742%" y="325" width="0.2258%" height="15" fill="rgb(238,154,13)" fg:x="2209" fg:w="5"/><text x="100.0242%" y="335.50"></text></g></svg></svg>